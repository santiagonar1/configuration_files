# Start c file
snippet c_start "inc + main(int, const char)"
#include <${1:stdio}.h>

int main(int argc, const char *argv[])
{
	${0}
	return 0;
}
endsnippet

# Main
snippet main "main(int, const char)"
int main(int argc, const char *argv[])
{
	${0}
	return 0;
}
endsnippet

## Control Statements
# if
snippet if "if"
if (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if + else"
if (${1:/* condition */}) {
	${2:${VISUAL}}

} else {
	${0}

}
endsnippet

# else if
snippet elif "else if"
else if (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

## Loops
# for
snippet for "For loop"
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# while
snippet wh "While loop"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

# do... while
snippet do "do while"
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet


## Functions
# Function without documentation
snippet fun "Normal function"
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

# Printf
snippet prt "printf"
printf("${1}\n");
endsnippet

snippet prtv "printf + value"
printf("${1} %${0:d}\n", ${2:i});
endsnippet


## MPI
snippet mpisize "MPI_Comm_size"
MPI_Comm_size(${1:MPI_COMM_WORLD}, &${2:num_proc});
endsnippet

snippet mpirank "MPI_Comm_rank"
MPI_Comm_size(${1:MPI_COMM_WORLD}, &${2:rank});
endsnippet

snippet mpibarrier "MPI_Barrier"
MPI_Barrier(${1:MPI_COMM_WORLD});
endsnippet

snippet mpisend "MPI_Send"
MPI_Send(${1:data}, ${2:count}, ${3:type}, ${4:dest}, ${5:tag}, ${6:MPI_COMM_WORLD});
endsnippet

snippet mpirecv "MPI_Recv"
MPI_Recv(${1:data}, ${2:count}, ${3:type}, ${4:source}, ${5:tag}, ${6:MPI_COMM_WORLD}, ${7:status});
endsnippet

snippet mpibcast "MPI_Bcast"
MPI_Bcast( ${1:data}, ${2:count}, ${3:type}, ${4:root}, ${5:MPI_COMM_WORLD});
endsnippet

snippet mpireduce "MPI_Reduce"
MPI_Reduce( ${1:s_data}, ${2:r_data}, ${3:count}, ${4:type}, ${5:op}, ${6:root}, ${7:MPI_COMM_WORLD});
endsnippet

snippet mpiscatter "MPI_Scatter"
MPI_Scatter( ${1:s_data}, ${2:s_count}, ${3:s_type}, ${4:r_data}, ${5:r_count}, ${6:r_type}, ${7:root}, ${8:MPI_COMM_WORLD});
endsnippet

snippet mpigather "MPI_Gather"
MPI_Gather( ${1:s_data}, ${2:s_count}, ${3:s_type}, ${4:r_data}, ${5:r_count}, ${6:r_type}, ${7:root}, ${8:MPI_COMM_WORLD});
endsnippet
